
LLVM IR:
; ModuleID = 'parser'
source_filename = "parser"

@fmt_int = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt_float = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt_char = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@fmt_bool = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt_str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

declare i32 @printf(ptr, ...)

declare i32 @scanf(ptr, ...)

define i32 @main() {
entry:
  %a = alloca i32, align 4
  %b = alloca double, align 8
  %c = alloca i8, align 1
  %d = alloca i1, align 1
  store i32 5, ptr %a, align 4
  store double 2.500000e+00, ptr %b, align 8
  store i8 122, ptr %c, align 1
  store i1 true, ptr %d, align 1
  %loadtmp = load i32, ptr %a, align 4
  %cmptmp = icmp sgt i32 %loadtmp, 3
  br i1 %cmptmp, label %if, label %else

if:                                               ; preds = %entry
  %loadtmp1 = load i32, ptr %a, align 4
  %addtmp = add i32 %loadtmp1, 10
  store i32 %addtmp, ptr %a, align 4
  store i1 false, ptr %d, align 1
  %loadtmp2 = load i32, ptr %a, align 4
  %cmptmp3 = icmp sgt i32 %loadtmp2, 10
  br i1 %cmptmp3, label %if4, label %else5

else:                                             ; preds = %entry
  %loadtmp12 = load i32, ptr %a, align 4
  %subtmp = sub i32 %loadtmp12, 10
  store i32 %subtmp, ptr %a, align 4
  store i1 true, ptr %d, align 1
  %loadtmp13 = load i8, ptr %c, align 1
  %cmptmp14 = icmp eq i8 %loadtmp13, 122
  br i1 %cmptmp14, label %if15, label %else16

if4:                                              ; preds = %if
  %0 = call i32 (ptr, ...) @printf(ptr @fmt_str)
  br label %endif

else5:                                            ; preds = %if
  br label %endif

endif:                                            ; preds = %else5, %if4
  %loadtmp6 = load double, ptr %b, align 8
  %cmptmp7 = fcmp ult double %loadtmp6, 5.000000e+00
  br i1 %cmptmp7, label %if8, label %else9

if8:                                              ; preds = %endif
  %1 = call i32 (ptr, ...) @printf(ptr @fmt_str)
  br label %endif10

else9:                                            ; preds = %endif
  %2 = call i32 (ptr, ...) @printf(ptr @fmt_str)
  br label %endif10

endif10:                                          ; preds = %else9, %if8
  br label %endif11

endif11:                                          ; preds = %endif21, %endif10
  %loadtmp22 = load i1, ptr %d, align 1
  br i1 %loadtmp22, label %if23, label %else24

if15:                                             ; preds = %else
  %3 = call i32 (ptr, ...) @printf(ptr @fmt_str)
  br label %endif17

else16:                                           ; preds = %else
  br label %endif17

endif17:                                          ; preds = %else16, %if15
  %loadtmp18 = load i1, ptr %d, align 1
  br i1 %loadtmp18, label %if19, label %else20

if19:                                             ; preds = %endif17
  %4 = call i32 (ptr, ...) @printf(ptr @fmt_str)
  br label %endif21

else20:                                           ; preds = %endif17
  %5 = call i32 (ptr, ...) @printf(ptr @fmt_str)
  br label %endif21

endif21:                                          ; preds = %else20, %if19
  br label %endif11

if23:                                             ; preds = %endif11
  %6 = call i32 (ptr, ...) @printf(ptr @fmt_str)
  br label %endif25

else24:                                           ; preds = %endif11
  %7 = call i32 (ptr, ...) @printf(ptr @fmt_str)
  br label %endif25

endif25:                                          ; preds = %else24, %if23
  ret i32 0
}

