<program_globals> ::= /* vazio */
                   | <program_global> <program_global_list>

<program_global_list> ::= /* vazio */
                       | <program_global> <program_global_list>

<program_global> ::= <function>
                  | <declaration_global>
                  | error

<function> ::= <int_function>
            | <float_function>
            | <char_function>
            | <bool_function>
            | <void_function>

<int_function> ::= "int" ID "(" <parameters> ")" "{" <program_locals> "}"

<float_function> ::= "float" ID "(" <parameters> ")" "{" <program_locals> "}"

<char_function> ::= "char" ID "(" <parameters> ")" "{" <program_locals> "}"

<bool_function> ::= "bool" ID "(" <parameters> ")" "{" <program_locals> "}"

<void_function> ::= "void" ID "(" <parameters> ")" "{" <program_locals> "}"

<parameters> ::= /* vazio */
              | <parameter> <parameter_list>

<parameter_list> ::= /* vazio */
                 | "," <parameter> <parameter_list>

<parameter> ::= "int" ID
             | "float" ID
             | "char" ID
             | "bool" ID

<declaration_global> ::= <int_declaration_globals>
                      | <float_declaration_globals>
                      | <char_declaration_globals>
                      | <bool_declaration_globals>

<int_declaration_globals> ::= "int" <int_declaration_global> <int_declaration_global_list> ";"

<int_declaration_global_list> ::= /* vazio */
                              | "," <int_declaration_global> <int_declaration_global_list>

<int_declaration_global> ::= ID
                         | ID "=" <term_const>
                         | <array_global>

<array_global> ::= ID "[" <term_const> "]"
               | ID "[" <term_const> "]" "=" "{" <array_values_global> "}"

<array_values_global> ::= <term_const>
                      | <array_values_global> "," <term_const>

<float_declaration_globals> ::= "float" <float_declaration_global> <float_declaration_global_list> ";"
<float_declaration_global_list> ::= /* vazio */
                                 | "," <float_declaration_global> <float_declaration_global_list>
<float_declaration_global> ::= ID
                           | ID "=" <term_const>

<char_declaration_globals> ::= "char" <char_declaration_global> <char_declaration_global_list> ";"
<char_declaration_global_list> ::= /* vazio */
                                | "," <char_declaration_global> <char_declaration_global_list>
<char_declaration_global> ::= ID
                          | ID "=" <term_const>

<bool_declaration_globals> ::= "bool" <bool_declaration_global> <bool_declaration_global_list> ";"
<bool_declaration_global_list> ::= /* vazio */
                                | "," <bool_declaration_global> <bool_declaration_global_list>
<bool_declaration_global> ::= ID
                          | ID "=" <term_const>

<program_locals> ::= /* vazio */
                 | <program_local> <program_local_list>

<program_local_list> ::= /* vazio */
                     | <program_local> <program_local_list>

<program_local> ::= <comand>
                | <declaration_local>

<declaration_local> ::= <int_declaration_locals>
                    | <float_declaration_locals>
                    | <char_declaration_locals>
                    | <bool_declaration_locals>

<int_declaration_locals> ::= "int" <int_declaration_local> <int_declaration_local_list> ";"
<int_declaration_local_list> ::= /* vazio */
                             | "," <int_declaration_local> <int_declaration_local_list>
<int_declaration_local> ::= ID
                        | ID "=" <expression>
                        | <array_local>

<array_local> ::= ID "[" <expression> "]"
              | ID "[" <expression> "]" "=" "{" <array_values_local> "}"

<array_values_local> ::= <expression>
                     | <array_values_local> "," <expression>

<float_declaration_locals> ::= "float" <float_declaration_local> <float_declaration_local_list> ";"
<float_declaration_local_list> ::= /* vazio */
                                | "," <float_declaration_local> <float_declaration_local_list>
<float_declaration_local> ::= ID
                          | ID "=" <expression>

<char_declaration_locals> ::= "char" <char_declaration_local> <char_declaration_local_list> ";"
<char_declaration_local_list> ::= /* vazio */
                               | "," <char_declaration_local> <char_declaration_local_list>
<char_declaration_local> ::= ID
                         | ID "=" <expression>

<bool_declaration_locals> ::= "bool" <bool_declaration_local> <bool_declaration_local_list> ";"
<bool_declaration_local_list> ::= /* vazio */
                               | "," <bool_declaration_local> <bool_declaration_local_list>
<bool_declaration_local> ::= ID
                         | ID "=" <expression>

<comand> ::= <assignment>
          | <if_statement>
          | <while>
          | <for>
          | <printf>
          | <scanf>
          | <return>
          | <call_function> ";"

<assignment> ::= ID "=" <expression> ";"
             | ID "[" <expression> "]" "=" <expression> ";"

<if_statement> ::= "if" "(" <expression> ")" "{" <program_locals> "}" <else_if_chain>

<else_if_chain> ::= /* vazio */
                | "else" "{" <program_locals> "}"
                | "elseif" "(" <expression> ")" "{" <program_locals> "}" <else_if_chain>

<while> ::= "while" <while_aux> "(" <expression> ")" "{" <program_locals> "}"

<while_aux> ::= /* bloco auxiliar para controle de fluxo, não afeta BNF principal */

<for> ::= "for" <for_aux> "(" <declaration_local> <expression> ";" <assignment> ")" "{" <program_locals> "}"

<for_aux> ::= /* bloco auxiliar para controle de fluxo, não afeta BNF principal */

<printf> ::= "printf" "(" STRING <printf_args> ")" ";"

<printf_args> ::= /* vazio */
              | "," <expression> <printf_args>

<scanf> ::= "scanf" "(" STRING <scanf_args> ")" ";"

<scanf_args> ::= /* vazio */
             | "," "&" ID <scanf_args>

<return> ::= "return" <expression> ";"
         | "return" ";"

<expression> ::= <soma_sub>
             | <mult_div>
             | "(" <expression> ")"
             | <comparison>
             | <log_exp>
             | <cast>
             | <call_function>
             | <term>

<soma_sub> ::= <expression> "+" <expression>
           | <expression> "-" <expression>

<mult_div> ::= <expression> "*" <expression>
           | <expression> "/" <expression>

<comparison> ::= <expression> "<" <expression>
             | <expression> ">" <expression>
             | <expression> "<=" <expression>
             | <expression> ">=" <expression>
             | <expression> "==" <expression>
             | <expression> "!=" <expression>

<log_exp> ::= <expression> "&&" <expression>
          | <expression> "||" <expression>
          | "!" <expression>

<cast> ::= "(" "int" ")" "(" <expression> ")"
       | "(" "int" ")" <term>
       | "(" "float" ")" "(" <expression> ")"
       | "(" "float" ")" <term>
       | "(" "char" ")" "(" <expression> ")"
       | "(" "char" ")" <term>
       | "(" "bool" ")" "(" <expression> ")"
       | "(" "bool" ")" <term>

<call_function> ::= ID "(" <call_parameters> ")"

<call_parameters> ::= /* vazio */
                  | <term> <call_parameter_list>

<call_parameter_list> ::= /* vazio */
                      | "," <term> <call_parameter_list>

<term> ::= NUMBER
       | ID
       | ID "[" <expression> "]"
       | CARACTERE

<term_const> ::= NUMBER
             | CARACTERE
